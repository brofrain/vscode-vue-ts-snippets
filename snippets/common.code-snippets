{
  "if () { }": {
    "prefix": "if",
    "body": ["if (${1:condition}) {", "\t$0", "}"],
    "description": "IF"
  },
  "if () { } else { }": {
    "prefix": "ife",
    "body": ["if (${1:condition}) {", "\t$2", "} else {", "\t$3", "}"],
    "description": "IF-Else"
  },

  "Object.keys()": {
    "prefix": "ok",
    "body": ["Object.keys(${1:object})"],
    "description": "OBject-Keys"
  },
  "Object.values()": {
    "prefix": "ov",
    "body": ["Object.values(${1:object})"],
    "description": "OBject-Values"
  },
  "Object.entries()": {
    "prefix": "oe",
    "body": ["Object.entries(${1:object})"],
    "description": "OBject-Entries"
  },
  "Object.fromEntries()": {
    "prefix": "ofe",
    "body": ["Object.fromEntries(${1:entries})"],
    "description": "OBject-From-Entries"
  },
  "Object.assign()": {
    "prefix": "oa",
    "body": ["Object.assign(${1:target}, ${2:source})"],
    "description": "OBject-Assign"
  },

  "for (const key in object) { }": {
    "prefix": "fin",
    "body": ["for (const ${2:key} in ${1:object}) {", "\t$0", "}"],
    "description": "For-IN"
  },
  "for (const item of array) { }": {
    "prefix": "fof",
    "body": ["for (const ${2:item} of ${1:array}) {", "\t$0", "}"],
    "description": "For-OF"
  },

  "for (const item of Object.values(object)) { }": {
    "prefix": "fofv",
    "body": [
      "for (const ${2:item} of Object.values(${1:object})) {",
      "\t$0",
      "}"
    ],
    "description": "For-OF-object-Values"
  },
  "for (const [k, v] of Object.entries(object)) { }": {
    "prefix": "fofe",
    "body": [
      "for (const [${2:k}, ${3:v}] of Object.entries(${1:object})) {",
      "\t$0",
      "}"
    ],
    "description": "For-OF-object-Entries"
  },

  "() => ": {
    "prefix": "fn",
    "body": ["($1) => $0"],
    "description": "FuNction"
  },
  "() => { }": {
    "prefix": "fnb",
    "body": ["($1) => {", "\t$0", "}"],
    "description": "FuNction-with-Body"
  },
  "const name = () => ": {
    "prefix": "nfn",
    "body": ["const ${1:name} = ($2) => $0"],
    "description": "Named-FuNction"
  },
  "const name = () => { }": {
    "prefix": "nfnb",
    "body": ["const ${1:name} = ($2) => {", "\t$0", "}"],
    "description": "Named-FuNction-with-Body"
  },

  "async () => ": {
    "prefix": "afn",
    "body": ["async ($1) => $0"],
    "description": "Async-FuNction"
  },
  "async () => new Promise((resolve) => { })": {
    "prefix": "afnp",
    "body": ["async ($1) => new Promise((resolve) => {", "\t$0", "})"],
    "description": "Async-FuNction-with-Promise"
  },
  "async () => { }": {
    "prefix": "afnb",
    "body": ["async ($1) => {", "\t$0", "}"],
    "description": "Async-FuNction-with-Body"
  },
  "const name = async () => ": {
    "prefix": "nafn",
    "body": ["const ${1:name} = async ($2) => $0"],
    "description": "Named-Async-FuNction"
  },
  "const name = async () => new Promise((resolve) => { })": {
    "prefix": "nafnp",
    "body": [
      "const ${1:name} = async ($2) => new Promise((resolve) => {",
      "\t$0",
      "})"
    ],
    "description": "Named-Async-FuNction-with-Promise"
  },
  "const name = async () => { }": {
    "prefix": "nafnb",
    "body": ["const ${1:name} = async ($2) => {", "\t$0", "}"],
    "description": "Named-Async-FuNction-with-Body"
  },

  "return ": {
    "prefix": "re",
    "body": ["return $0"],
    "description": "REturn"
  },

  "return { }": {
    "prefix": "reb",
    "body": ["return { $0 }"],
    "description": "REturn-with-Body"
  },

  "import { } from \"module\"": {
    "prefix": "im",
    "body": ["import { $2 } from \"${1:module}\""],
    "description": "IMport"
  },
  "import module from \"module\"": {
    "prefix": "imd",
    "body": ["import ${2:module} from \"${1:module}\""],
    "description": "IMport-Default"
  },

  "export ": {
    "prefix": "ex",
    "body": ["export $0"],
    "description": "EXport"
  },
  "export default ": {
    "prefix": "exd",
    "body": ["export default $0"],
    "description": "EXport-DEfault"
  },
  "export const name = ": {
    "prefix": "exn",
    "body": ["export const ${1:name} = $0"],
    "description": "EXport-Named"
  },

  "console.log()": {
    "prefix": "cl",
    "body": ["console.log(${1:message})"],
    "description": "Console-Log"
  },
  "console.warn()": {
    "prefix": "cw",
    "body": ["console.warn(${1:message})"],
    "description": "Console-Warn"
  },
  "console.error()": {
    "prefix": "ce",
    "body": ["console.error(${1:message})"],
    "description": "Console-Error"
  }
}
